---
- name: A simple playbook to create an EC2 instance on AWS
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files:
    - snow_vars.yml

  tasks:

    - name: Show Instance Type
      debug:
        msg: "{{ ec2_instance_type }}"

    - name: Show Instance name
      debug:
        msg: "{{ ec2_instance_name }}"

    - name: Show SNOW Record
      debug:
        msg: "{{ snow_ticket_num }}"

    - name: Create a basic AWS ec2 instance
      amazon.aws.ec2_instance:
        name: "{{ ec2_instance_name }}"
        key_name: "{{ ec2_key_pair }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image_id }}"
        network:
          assign_public_ip: "{{ assign_public_ip }}"
        wait: true
        security_group: "{{ ec2_sg }}"
        count: "{{ ec2_instance_count }}"
        vpc_subnet_id: "{{ ec2_subnet_id }}"
        region: "{{ ec2_region }}"
      register: ec2_output

    - name: Return results
      debug: 
        var: ec2_output

    - name: Put the new EC2 instance in the CMDB
      servicenow.itsm.configuration_item:
        state: present
        name: "{{ ec2_output.instances[0].public_dns_name }}"
        ip_address: "{{ ec2_output.instances[0].public_ip_address }}"
        environment: production
        sys_class_name: cmdb_ci_server
        other:
          classification: Production
          fqdn: "{{ ec2_output.instances[0].public_dns_name }}"
          os: "Linux Red Hat"
          host_name: "{{ ec2_instance_name }}"
        instance: 
          host: "{{ sn_instance }}"
          username: "{{ sn_username }}"
          password: "{{ sn_password }}"

    # - name: Update a catalog work notes and state in ServiceNow
    #   servicenow.servicenow.snow_record:
    #     state: present
    #     number: "{{ snow_ticket_num }}"
    #     table: sc_request
    #     instance: "{{ sn_instance }}"
    #     username: "{{ sn_username }}"
    #     password: "{{ sn_password }}"
    #     data:
    #       request_state: "Closed Complete"
    #       work_notes: "{{ ec2_output }}"
    #   when: snow_ticket_num != ''

    # - name: Gather the ec2 info
    #   ec2_instance_info:
    #     filters:
    #       "tag:Name": "{{ ec2_instance_name }}"
    #   register: ec2_node_info

    # - name: DUmp it out
    #   debug: 
    #     var: ec2_node_info


